{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "defaultValue": "Send-DefenderforCloudRecommendationReport",
            "type": "string",
            "metadata": {
                "description": "Name of the Logic Apps resource to be created"
            }
        },
        "Location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "string",
            "metadata": {
                "description": "Location of the Logic Apps resource to be created"
            }
        }
    },
    "variables": {
        "azureblob": "[concat('azureblob-', parameters('PlaybookName'))]",
        "office365": "[concat('office365-', parameters('PlaybookName'))]"

    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azureblob')]",
            "location": "[parameters('Location')]",
            "kind": "V1",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {
                },
                "parameterValueSet": {
                    "name": "managedIdentityAuth",
                    "values": {}
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('office365')]",
            "location": "[parameters('Location')]",
            "properties": {
                "displayName": "[parameters('PlaybookName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[parameters('Location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azureblob'))]",
                "[resourceId('Microsoft.Web/connections', variables('office365'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "interval": 1,
                                "frequency": "Day",
                                "timeZone": "Tokyo Standard Time",
                                "schedule": {
                                    "hours": [
                                        "9"
                                    ],
                                    "minutes": [
                                        0
                                    ]
                                }
                            },
                            "evaluatedRecurrence": {
                                "interval": 1,
                                "frequency": "Day",
                                "timeZone": "Tokyo Standard Time",
                                "schedule": {
                                    "hours": [
                                        "9"
                                    ],
                                    "minutes": [
                                        0
                                    ]
                                }
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Initialize_variable_-_blob_content": {
                            "runAfter": {
                                "Parse_JSON_-_blob_content": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "mailAddressArray",
                                        "type": "array",
                                        "value": "@body('Parse_JSON_-_blob_content')"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_-_blob_content": {
                            "runAfter": {
                                "BLOB_コンテンツを取得する_(V2)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('BLOB_コンテンツを取得する_(V2)')",
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "subscriptionId": {
                                                "type": "string"
                                            },
                                            "mailAddress": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "subscriptionId",
                                            "mailAddress"
                                        ]
                                    }
                                }
                            }
                        },
                        "BLOB_コンテンツを取得する_(V2)": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('mystorageaccount'))}/files/@{encodeURIComponent(encodeURIComponent('/txt/mailAddressList_Azure.txt'))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            }
                        },
                        "For_each": {
                            "foreach": "@outputs('Parse_JSON_-_blob_content')['body']",
                            "actions": {
                                "メールの送信_(V2)": {
                                    "runAfter": {
                                        "Append_to_string_variable__-_Create_HTML_table_sumRecomm2": [
                                            "Succeeded"
                                        ],
                                        "Append_to_string_variable__-_Create_HTML_table_crithighRecomm2": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "To": "@item()['mailAddress']",
                                            "Subject": "【要対応】 Defender for Cloud 推奨事項レポート (サブスクリプション ID: @{item()['subscriptionId']})",
                                            "Body": "<style>\n    body {\n        font-family: Arial, sans-serif;\n        font-size: 14px;\n        line-height: 1.6;\n        color: #333333;\n    }\n    h1, h2 {\n       color: #2c3e50;\n    }\n    table {\n        width: 100%;\n        border-collapse: collapse;\n        margin: 20px 0;\n    }\n    table th, table td {\n        border: 1px solid #dddddd;\n        text-align: left;\n        padding: 8px;\n    }\n    table th {\n        background-color: #f4f4f4;\n        font-weight: bold;\n    }\n    .half-width-table {\n        width: 50%;\n        border-collapse: collapse;\n        margin: 20px 0;\n    }\n    .half-width-table th, .half-width-table td {\n        border: 1px solid #dddddd;\n        text-align: left;\n        padding: 8px;\n        width: 25%; \n    }\n\n    table tr:nth-child(even) {\n        background-color: #f9f9f9;\n    }\n    table tr:hover {\n        background-color: #f1f1f1;\n    }\n    .Critical {\n        background-color: #ffcccc;\n    }\n    .High {\n        background-color: #ffe6cc;\n    }\n    .Medium {\n        background-color: #ffffcc;\n    }\n    .Low {\n        background-color: #e6ffcc;\n    }\n    a {\n        color: #3498db;\n        text-decoration: none;\n    }\n    a:hover {\n        text-decoration: underline;\n    }\n</style>\n\n以下は @{convertFromUtc(utcNow(),'Tokyo Standard Time','yyyy/MM/dd')} 時点であなたの担当で管理している Azure サブスクリプションで出力している推奨事項の一覧です。\nリスク軽減のため、早急に対処をお願いいたします。\n\n<h2>対象サブスクリプション ID</h2>\n<h3>@{item()['subscriptionId']}</h3>\n<br>\n\n<h2>リスク別推奨事項サマリ</h2>\n@{variables('sumRecommTableString')}\n<br>\n\n<h2>リスク別推奨事項一覧 (リスクレベル：緊急 / 高)</h2>@{variables('crithighRecommTableString')}",
                                            "Importance": "High"
                                        },
                                        "path": "/v2/Mail"
                                    }
                                },
                                "HTTP_-_summarize_recommendations": {
                                    "type": "Http",
                                    "inputs": {
                                        "uri": "https://management.azure.com/providers/MIcrosoft.ResourceGraph/resources",
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "queries": {
                                            "api-version": "2021-03-01"
                                        },
                                        "body": {
                                            "query": "securityresources | where type =~ 'microsoft.security/assessments' | extend assessmentType = (tostring(properties.metadata.assessmentType)) | extend assessmentTypeSkimmed = case(tostring(properties.metadata.assessmentType) == 'BuiltIn', 'BuiltIn', tostring(properties.metadata.assessmentType) == 'BuiltInPolicy', 'BuiltIn', tostring(properties.metadata.assessmentType) == 'CustomPolicy', 'Custom', tostring(properties.metadata.assessmentType) == 'CustomerManaged', 'Custom', tostring(properties.metadata.assessmentType) == 'ManualCustomPolicy', 'Custom', tostring(properties.metadata.assessmentType) == 'ManualBuiltInPolicy', 'BuiltIn', dynamic(null)) | extend assessmentId = tolower(id) | extend assessmentKey = name | extend source = tostring(properties.resourceDetails.Source) | extend resourceId = tostring(properties.resourceDetails.ResourceId) | extend displayName = tostring(properties.displayName) | extend statusCode = tostring(properties.status.code) | extend severity = tostring(properties.metadata.severity) | extend severityLevel = (case(severity =~ 'High', 3, severity =~ 'Medium', 2, severity =~ 'Low', 1, 0)) | extend riskLevelText = tostring(properties.risk.level) | extend riskLevel = (case(riskLevelText =~ 'Critical', 4, riskLevelText =~ 'High', 3, riskLevelText =~ 'Medium', 2, riskLevelText =~ 'Low', 1, 0)) | extend riskFactors = iff(isnull(properties.risk.riskFactors), dynamic([]), properties.risk.riskFactors) | extend statusCause = tostring(properties.status.cause) | extend isExempt = iff(statusCause == 'Exempt', tobool(1), tobool(0)) | extend firstEvaluationDate = tostring(todatetime(properties.status.firstEvaluationDate)) | extend statusChangeDate = tostring(todatetime(properties.status.statusChangeDate)) | extend url  = strcat('https://', tostring(todatetime(properties.links.azurePortal))) | project tenantId, subscriptionId, resourceGroup, resourceId, source, displayName, statusCode, severity, severityLevel, riskLevelText, riskLevel, riskFactors, isExempt, statusCause, statusChangeDate, assessmentType, assessmentTypeSkimmed, assessmentKey, url | where statusCode == 'Unhealthy' | where subscriptionId == '@{item()['subscriptionId']}' | summarize Critical = countif(riskLevel == '4'), High = countif(riskLevel == '3'), Medium = countif(riskLevel == '2'), Low = countif(riskLevel == '1') |  project Critical, High, Medium, Low"
                                        },
                                        "authentication": {
                                            "type": "ManagedServiceIdentity"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Parse_JSON_-_summarize_recommendations": {
                                    "runAfter": {
                                        "HTTP_-_summarize_recommendations": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP_-_summarize_recommendations')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "totalRecords": {
                                                    "type": "integer"
                                                },
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "Critical": {
                                                                "type": "integer"
                                                            },
                                                            "High": {
                                                                "type": "integer"
                                                            },
                                                            "Medium": {
                                                                "type": "integer"
                                                            },
                                                            "Low": {
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "Critical",
                                                            "High",
                                                            "Medium",
                                                            "Low"
                                                        ]
                                                    }
                                                },
                                                "facets": {
                                                    "type": "array"
                                                },
                                                "resultTruncated": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "HTTP_-_critical_and_high_recommendations": {
                                    "type": "Http",
                                    "inputs": {
                                        "uri": "https://management.azure.com/providers/MIcrosoft.ResourceGraph/resources",
                                        "method": "POST",
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "queries": {
                                            "api-version": "2021-03-01"
                                        },
                                        "body": {
                                            "query": "securityresources | where type =~ 'microsoft.security/assessments' | extend assessmentType = (tostring(properties.metadata.assessmentType)) | extend assessmentTypeSkimmed = case(tostring(properties.metadata.assessmentType) == 'BuiltIn', 'BuiltIn', tostring(properties.metadata.assessmentType) == 'BuiltInPolicy', 'BuiltIn', tostring(properties.metadata.assessmentType) == 'CustomPolicy', 'Custom', tostring(properties.metadata.assessmentType) == 'CustomerManaged', 'Custom', tostring(properties.metadata.assessmentType) == 'ManualCustomPolicy', 'Custom', tostring(properties.metadata.assessmentType) == 'ManualBuiltInPolicy', 'BuiltIn', dynamic(null)) | extend assessmentId = tolower(id) | extend assessmentKey = name | extend source = tostring(properties.resourceDetails.Source) | extend resourceId = tostring(properties.resourceDetails.ResourceId) | extend displayName = tostring(properties.displayName) | extend statusCode = tostring(properties.status.code) | extend severity = tostring(properties.metadata.severity) | extend severityLevel = (case(severity =~ 'High', 3, severity =~ 'Medium', 2, severity =~ 'Low', 1, 0)) | extend riskLevelText = tostring(properties.risk.level) | extend riskLevel = (case(riskLevelText =~ 'Critical', 4, riskLevelText =~ 'High', 3, riskLevelText =~ 'Medium', 2, riskLevelText =~ 'Low', 1, 0)) | extend riskFactors = iff(isnull(properties.risk.riskFactors), dynamic([]), properties.risk.riskFactors) | extend statusCause = tostring(properties.status.cause) | extend isExempt = iff(statusCause == 'Exempt', tobool(1), tobool(0)) | extend firstEvaluationDate = tostring(todatetime(properties.status.firstEvaluationDate)) | extend statusChangeDate = tostring(todatetime(properties.status.statusChangeDate)) | extend url  = strcat('https://', tostring(todatetime(properties.links.azurePortal))) | project tenantId, subscriptionId, resourceGroup, resourceId, source, displayName, statusCode, severity, severityLevel, riskLevelText, riskLevel, riskFactors, isExempt, statusCause, statusChangeDate, assessmentType, assessmentTypeSkimmed, assessmentKey, url | where statusCode == 'Unhealthy' | where subscriptionId == '@{item()['subscriptionId']}' | where riskLevel >= 3 | extend resourceName = tostring(split(resourceId, '/')[-1]) | project resourceGroup, resourceName, displayName, risk = riskLevelText, riskLevel, severity, severityLevel, url | order by riskLevel desc, severityLevel desc | project-away riskLevel, severityLevel"
                                        },
                                        "authentication": {
                                            "type": "ManagedServiceIdentity"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Parse_JSON_-_critical_and_high_recommendations": {
                                    "runAfter": {
                                        "HTTP_-_critical_and_high_recommendations": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP_-_critical_and_high_recommendations')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "totalRecords": {
                                                    "type": "integer"
                                                },
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "resourceGroup": {
                                                                "type": "string"
                                                            },
                                                            "resourceName": {
                                                                "type": "string"
                                                            },
                                                            "displayName": {
                                                                "type": "string"
                                                            },
                                                            "risk": {
                                                                "type": "string"
                                                            },
                                                            "severity": {
                                                                "type": "string"
                                                            },
                                                            "url": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "resourceGroup",
                                                            "resourceName",
                                                            "displayName",
                                                            "severity",
                                                            "risk",
                                                            "url"
                                                        ]
                                                    }
                                                },
                                                "facets": {
                                                    "type": "array"
                                                },
                                                "resultTruncated": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "For_each_1": {
                                    "foreach": "@outputs('Parse_JSON_-_summarize_recommendations')?['body']?['data']",
                                    "actions": {
                                        "Append_to_string_variable__-_Create_HTML_table_sumRecomm": {
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "sumRecommTableString",
                                                "value": "        <tr>\n            <td class=\"Critical\">@{item()?['Critical']}</td>\n            <td class=\"High\">@{item()?['High']}</td>\n            <td class=\"Medium\">@{item()?['Medium']}</td>\n            <td class=\"Low\">@{item()?['Low']}</td>\n        </tr>"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_variable__-_Create_HTML_table_sumRecomm": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach",
                                    "runtimeConfiguration": {
                                        "concurrency": {
                                            "repetitions": 1
                                        }
                                    }
                                },
                                "Set_variable__-_Create_HTML_table_sumRecomm": {
                                    "runAfter": {
                                        "Parse_JSON_-_summarize_recommendations": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "sumRecommTableString",
                                        "value": "<table class=\"half-width-table\">\n        <tr>\n            <th>Critical</th>\n            <th>High</th>\n            <th>Medium</th>\n            <th>Low</th>\n        </tr>"
                                    }
                                },
                                "Append_to_string_variable__-_Create_HTML_table_sumRecomm2": {
                                    "runAfter": {
                                        "For_each_1": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "sumRecommTableString",
                                        "value": "</table>"
                                    }
                                },
                                "Set_variable_-_Create_HTML_tale_crithighRecomm": {
                                    "runAfter": {
                                        "Parse_JSON_-_critical_and_high_recommendations": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "crithighRecommTableString",
                                        "value": "    <table>\n        <tr>\n            <th>resourceGroup</th>\n            <th>resourceName</th>\n            <th>displayName</th>\n            <th>risk</th>\n            <th>severity</th>\n            <th>link</th>\n        </tr>"
                                    }
                                },
                                "For_each_2": {
                                    "foreach": "@outputs('Parse_JSON_-_critical_and_high_recommendations')?['body']?['data']",
                                    "actions": {
                                        "Append_to_string_variable_-_Create_HTML_table_crithighRecomm": {
                                            "type": "AppendToStringVariable",
                                            "inputs": {
                                                "name": "crithighRecommTableString",
                                                "value": "<tr>\n            <td>@{items('For_each_2')?['resourceGroup']}</td>\n            <td>@{item()?['resourceName']}</td>\n            <td>@{item()?['displayName']}</td>\n            <td class=\"@{item()?['risk']}\">@{item()?['risk']}</td>\n            <td class=\"@{item()?['severity']}\">@{item()?['severity']}</td>\n            <td><a href=\"@{item()?['url']}\">Azure Portal Link</a></td>\n        </tr>"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_variable_-_Create_HTML_tale_crithighRecomm": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Append_to_string_variable__-_Create_HTML_table_crithighRecomm2": {
                                    "runAfter": {
                                        "For_each_2": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                        "name": "crithighRecommTableString",
                                        "value": "</table>"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_-_HTTP_table_crithighRecomm": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Initialize_variable_-_HTTP_table_sumrecomm": {
                            "runAfter": {
                                "Initialize_variable_-_blob_content": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "sumRecommTableString",
                                        "type": "string",
                                        "value": "\"\""
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_HTTP_table_crithighRecomm": {
                            "runAfter": {
                                "Initialize_variable_-_HTTP_table_sumrecomm": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "crithighRecommTableString",
                                        "type": "string",
                                        "value": "\"\""
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azureblob'))]",
                                "connectionName": "[variables('azureblob')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "office365": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('office365'))]",
                                "connectionName": "[variables('office365')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}